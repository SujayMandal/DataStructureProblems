DROP TABLE TENANT_CONFIG IF EXISTS;
DROP TABLE ADDRESS IF EXISTS;
DROP TABLE TENANT IF EXISTS;
DROP TABLE SYSTEM_KEY IF EXISTS;
DROP TABLE SYSTEM_PARAMETER IF EXISTS;
DROP TABLE SYSTEM_PARAMETER_AUD IF EXISTS;
DROP TABLE COMMAND IF EXISTS;

CREATE TABLE ADDRESS (
	ID CHARACTER(36) NOT NULL,
	TENANT_ID CHARACTER(36) NOT NULL,
	ADDRESS_1 VARCHAR(45) NOT NULL,
	ADDRESS_2 VARCHAR(45),
	CITY VARCHAR(45) NOT NULL,
	STATE VARCHAR(45) NOT NULL,
	ZIP VARCHAR(45) NOT NULL,
	COUNTRY VARCHAR(45) NOT NULL,
	CREATED_BY CHARACTER(36) NOT NULL,
	CREATED_ON BIGINT NOT NULL,
	LAST_UPDATED_BY CHARACTER(36),
	LAST_UPDATED_ON BIGINT,
	PRIMARY KEY (ID)
);
CREATE TABLE SYSTEM_KEY (
	ID CHARACTER(36) NOT NULL,
	SYSTEM_KEY VARCHAR(45) NOT NULL,
	KEY_TYPE VARCHAR(45) NOT NULL,
	CREATED_BY CHARACTER(36) NOT NULL,
	CREATED_ON BIGINT NOT NULL,
	LAST_UPDATED_BY CHARACTER(36),
	LAST_UPDATED_ON BIGINT,
	PRIMARY KEY (ID)
);
CREATE TABLE TENANT (
	ID CHARACTER(36) NOT NULL,
	NAME VARCHAR(45) NOT NULL,
	DESCRIPTION VARCHAR(255),
	CODE VARCHAR(45) NOT NULL,
	TENANT_TYPE VARCHAR(45) NOT NULL,
	AUTH_TOKEN VARCHAR(64),
	CREATED_BY CHARACTER(36) NOT NULL,
	CREATED_ON BIGINT NOT NULL,
	LAST_UPDATED_BY CHARACTER(36),
	LAST_UPDATED_ON BIGINT,
	PRIMARY KEY (ID)
);
CREATE TABLE TENANT_CONFIG (
	ID CHARACTER(36) NOT NULL,
	TENANT_ID CHARACTER(36) NOT NULL,
	SYSTEM_KEY_ID CHARACTER(36) NOT NULL,
	CONFIG_VALUE VARCHAR(45),
	CREATED_BY CHARACTER(36) NOT NULL,
	ROLE CHARACTER(20) NULL,
	CREATED_ON BIGINT NOT NULL,
	LAST_UPDATED_BY CHARACTER(36),
	LAST_UPDATED_ON BIGINT,
	PRIMARY KEY (ID)
);
ALTER TABLE ADDRESS
	ADD FOREIGN KEY (TENANT_ID) 
	REFERENCES TENANT (ID);


ALTER TABLE TENANT_CONFIG
	ADD FOREIGN KEY (TENANT_ID) 
	REFERENCES TENANT (ID);

ALTER TABLE TENANT_CONFIG
	ADD FOREIGN KEY (SYSTEM_KEY_ID) 
	REFERENCES SYSTEM_KEY (ID);

CREATE TABLE SYSTEM_PARAMETER(
			ID CHARACTER(36),
			SYS_KEY VARCHAR(100) ,
			DESCRIPTION VARCHAR(200),
			SYS_VALUE VARCHAR(100),
			IS_ACTIVE CHARACTER(1),
			CREATED_BY VARCHAR(100),
			CREATED_ON BIGINT,
			LAST_UPDATED_BY VARCHAR(100),
			LAST_UPDATED_ON BIGINT,
			PRIMARY KEY(ID)
);

CREATE TABLE SYSTEM_PARAMETER_AUD(
			ID CHARACTER(36),
			SYS_KEY VARCHAR(100),
			DESCRIPTION VARCHAR(200),
			SYS_VALUE VARCHAR(100),
			IS_ACTIVE CHARACTER(1),
			CREATED_BY VARCHAR(100),
			CREATED_ON BIGINT,
			LAST_UPDATED_BY VARCHAR(100),
			LAST_UPDATED_ON BIGINT,
			REV BIGINT,
			REVTYPE BIGINT,
			PRIMARY KEY(ID,REV)
);


CREATE TABLE COMMAND(
  ID CHARACTER(36),
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(200),
  EXECUTION_SEQUENCE INT,
  PROCESS VARCHAR(100),
  CREATED_BY CHARACTER(36),
  CREATED_ON BIGINT,
  LAST_UPDATED_BY CHARACTER(36),
  LAST_UPDATED_ON BIGINT,
  PRIMARY KEY (ID)
);

CREATE TABLE AUTHTOKEN(
  ID CHARACTER(36),
	TENANT_ID CHARACTER(36),
	AUTH_CODE VARCHAR(64),
	ACTIVE_FROM BIGINT,
	ACTIVE_UNTIL BIGINT,
	STATUS VARCHAR(100),
	COMMENT VARCHAR(100),
	CREATED_ON BIGINT,
	CREATED_BY VARCHAR(100),
	LAST_UPDATED_BY VARCHAR(100) ,
	LAST_UPDATED_ON BIGINT,
	PRIMARY KEY (ID)
 
);

CREATE TABLE PERMISSIONS (
	Id VARCHAR(50) NOT NULL,
	permission VARCHAR(100) NOT NULL,
	permission_type VARCHAR(50) NOT NULL,
	ui_element_id VARCHAR(500) NULL,
	PRIMARY KEY (Id)
);

CREATE TABLE PERMISSION_ROLES_MAPPING (
	ID VARCHAR(50) NOT NULL,
	TENANT_ROLES_MAP_ID VARCHAR(50) NOT NULL,
	PERMISSION_ID VARCHAR(50) NOT NULL,
	PRIMARY KEY (ID)	
);

CREATE TABLE TENANT_ROLES_MAPPING (
	Id VARCHAR(50) NOT NULL,
	roles_id VARCHAR(50) NOT NULL,
	tenant_code VARCHAR(10) NOT NULL,
	PRIMARY KEY (Id)
);
	
CREATE TABLE TENANT_USER_MAPPING (
	Id VARCHAR(50) NOT NULL,
	user_id VARCHAR(50) NOT NULL ,
	tenant_code VARCHAR(10) NOT NULL,
	PRIMARY KEY (Id)
);


CREATE TABLE ROLES (
	ROLE VARCHAR(100) NOT NULL,
	Id CHAR(36) NOT NULL,
	PRIMARY KEY (Id)
	);
	
	

CREATE TABLE NOTIFICATION_TYPE (
	ID CHAR(36) NOT NULL,
	TYPE VARCHAR(50) NOT NULL,
	DESCRIPTION VARCHAR(255) NULL,
	CREATED_BY VARCHAR(32) NOT NULL,
	CREATED_ON BIGINT NOT NULL,
	LAST_UPDATED_BY VARCHAR(32) NULL,
	LAST_UPDATED_ON BIGINT NULL,
	PRIMARY KEY (ID)
);

CREATE TABLE NOTIFICATION_EVENT (
	ID CHAR(36) NOT NULL,
	NAME VARCHAR(45) NOT NULL,
	DESCRIPTION VARCHAR(255) NOT NULL ,
	CLASSIFICATION VARCHAR(64) NOT NULL,
	CREATED_BY VARCHAR(32) NOT NULL,
	CREATED_ON BIGINT NOT NULL,
	LAST_UPDATED_BY VARCHAR(32) NULL,
	LAST_UPDATED_ON BIGINT NULL,
	PRIMARY KEY (ID)
);
CREATE TABLE NOTIFICATION_EMAIL_TEMPLATE(
	ID CHAR(36) NOT NULL,
	NOTIFICATION_EVENT_ID CHAR(36) NOT NULL,
	NAME VARCHAR(64) NOT NULL,
	DESCRIPTION VARCHAR(256) NOT NULL,
	BODY_DEFINITION CLOB(30K) NOT NULL,
	SUBJECT_DEFINITION VARCHAR(256) NOT NULL,
    IS_ACTIVE INT,
	MAJOR_VERSION INT,
	MAIL_CONTENT_TYPE VARCHAR(64) NOT NULL,
	CREATED_BY VARCHAR(32) NOT NULL,
	CREATED_ON BIGINT NOT NULL,
	LAST_UPDATED_BY VARCHAR(32) NULL,
	LAST_UPDATED_ON BIGINT NULL,
	PRIMARY KEY (ID)
);

CREATE TABLE NOTIFICATION_SMS_TEMPLATE (
	ID CHAR(36) NOT NULL,
	NAME VARCHAR(64) NOT NULL,
	DESCRIPTION VARCHAR(256) NOT NULL,
	SMS_DEFINITION CLOB(30K) NOT NULL,
	IS_ACTIVE INT,
	MAJOR_VERSION INT,
	CREATED_BY VARCHAR(32) NOT NULL,
	CREATED_ON BIGINT,
	LAST_UPDATED_BY VARCHAR(32) NULL,
	LAST_UPDATED_ON BIGINT,
	PRIMARY KEY (ID)
);

CREATE TABLE NOTIFICATION_EVENT_TEMPLATE_MAPPING (
	ID CHAR(36) NOT NULL,
	NAME VARCHAR(45) NOT NULL, 	
	NOTIFICATION_EVENT_ID CHAR(36) NOT NULL,
	NOTIFICATION_TEMPLATE_ID CHAR(36) NOT NULL,
	NOTIFICATION_TYPE_ID CHAR(36) NOT NULL,
	TENANT_ID VARCHAR(45) NOT NULL,
	TO_ADDRESS VARCHAR(256) NULL,
	FROM_ADDRESS VARCHAR(256) NULL,
	CC_ADDRESS VARCHAR(256) NULL,
	BCC_ADDRESS VARCHAR(256) NULL,
	MOBILE BIGINT,
	CREATED_BY VARCHAR(32) NOT NULL,
	CREATED_ON BIGINT,
	LAST_UPDATED_BY VARCHAR(32) NULL,
	LAST_UPDATED_ON BIGINT,
	PRIMARY KEY (ID)
);

CREATE TABLE USERS (
	Id CHAR(36) NOT NULL,
	username VARCHAR(50) NOT NULL,
	PASSWORD VARCHAR(100) NULL,
	enabled TINYINT NOT NULL,
	NAME VARCHAR(126) NULL,
	sys_admin BOOLEAN  DEFAULT FALSE NOT NULL,
	rf_user BOOLEAN DEFAULT FALSE NOT NULL,
	OFFICIAL_EMAIL VARCHAR(252) NULL,
	ORGANIZATION VARCHAR(126) NULL,
	COMMENTS VARCHAR(252) NULL,
	CREATED_ON BIGINT NULL,
	LAST_ACTIVATED_ON BIGINT NULL,
	LAST_DEACTIVATED_ON BIGINT NULL,
	PRIMARY KEY (Id)
)


