<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

	<description>Example configuration to get you started.</description>

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="${entitymanager.packages.to.scan}" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="${db.generateDdl}" />
				<property name="databasePlatform" value="${db.dialect}" />
				<property name="showSql" value="${db.showSql}" />
			</bean>
		</property>
		<property name="persistenceProvider" ref="persistanceProvider" />
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.format_sql">${db.format_sql}</prop>
			</props>
		</property>
		<property name="persistenceUnitManager">
			<bean
				class="org.springframework.data.jpa.support.MergingPersistenceUnitManager">
				<property name="persistenceXmlLocations">
					<list>
						<value>classpath*:META-INF/*persistence*.xml</value>
					</list>
				</property>
				<property name="defaultDataSource" ref="dataSource" />
			</bean>
		</property>
		<property name="persistenceUnitName" value="spring-jpa" />
	</bean>

	<bean id="persistanceProvider"
		class="com.ca.framework.core.db.persistance.HibernatePersistenceProviderMT" />

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
		<property name="jpaDialect">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
		</property>
	</bean>

	<bean id="dataSource"
		class="com.ca.framework.core.db.persistance.TenantRoutingDataSource">
		<property name="defaultTargetDataSource" ref="umgAdminDataSource"></property>
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<jpa:auditing auditor-aware-ref="auditorAwareBean" />

	<bean id="auditorAwareBean" class="com.ca.framework.core.db.domain.AuditorAwareImpl" />
	<bean id="cacheRegistry"
		class="com.ca.framework.core.cache.registry.impl.DefaultCacheRegistry">
		<constructor-arg name="configFile" value="hazelcast-config.xml" />
	</bean>

	<bean id="systemParameterProvider"
		class="com.ca.framework.core.systemparameter.SystemParameterProviderImpl">
	</bean>

	<mongo:db-factory id="mongoDbFactoryReplica" dbname="${mongo.dbname}"
		mongo-ref="mongoSet" username="${mongo.username}" password="${mongo.password}" />

	<!-- <mongo:mongo id="mongoSet" replica-set="${mongo_replica_set}"> <mongo:options 
		connections-per-host="${mongo.connectionsPerHost}" connect-timeout="${mongo.connectTimeout}" 
		max-wait-time="${mongo.maxWaitTime}" /> </mongo:mongo> -->

	<mongo:mongo-client id="mongoSet" replica-set="${mongo_replica_set}">
		<mongo:client-options connections-per-host="${mongo.connectionsPerHost}"
			connect-timeout="${mongo.connectTimeout}" max-wait-time="${mongo.maxWaitTime}" />
	</mongo:mongo-client>

	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
		<constructor-arg name="mongoDbFactory" ref="mongoDbFactoryReplica" />
	</bean>

	<bean id="mongoDAO"
		class="com.ca.umg.business.transaction.migrate.dao.MigrateTransactionMongoDAO">
		<constructor-arg name="mongoOps" ref="mongoTemplate" />
	</bean>

	<bean id="mongoTransactionDAO"
		class="com.ca.umg.business.transaction.mongo.dao.MongoTransactionDAOImpl">
		<constructor-arg name="mongoDb"
			value="#{mongoSet.getDatabase('ra_transaction_documents')}" />
		<constructor-arg name="mongoTemplate" ref="mongoTemplate" />
	</bean>

	<bean id="taskExecutor" class="com.ca.framework.core.task.executor.CustomTaskExecutor">
		<property name="corePoolSize" value="5" />
		<property name="maxPoolSize" value="10" />
		<property name="waitForTasksToCompleteOnShutdown" value="true" />
	</bean>

	<jpa:repositories base-package="com.ca.umg.business.version.*.dao" />
	
	<jpa:repositories base-package="com.ca.umg.report.service.*.dao" />
	
	<bean id="modelReportTemplateDAO" class="org.mockito.Mockito"
		factory-method="mock">
		<constructor-arg value="com.ca.umg.report.service.dao.ModelReportTemplateDAO"></constructor-arg>
	</bean>
	
	<!-- <bean id="modelReportTemplateBO" class="org.mockito.Mockito"
		factory-method="mock">
		<constructor-arg value="com.ca.umg.business.model.bo.ModelReportTemplateBO"></constructor-arg>
	</bean> -->
	
	<bean id="modelReportStatusDAO" class="org.mockito.Mockito"
		factory-method="mock">
		<constructor-arg value="com.ca.umg.report.service.dao.ModelReportStatusDAO"></constructor-arg>
	</bean>
	
	<bean id="reportService" class="org.mockito.Mockito"
		factory-method="mock">
		<constructor-arg value="com.ca.umg.report.service.ReportService"></constructor-arg>
	</bean>
	
	<bean id="poolDao" class="com.ca.pool.dao.PoolDAOImpl" />
	
	<bean id="poolObjectsLoader" class="com.ca.pool.PoolObjectsLoaderTestImpl" >
		<property name="poolDao" ref="poolDao"/>
		<property name="cacheRegistry" ref="cacheRegistry"/>
	</bean>	
	
	<bean id="rModelDAO" class="com.ca.framework.core.rmodel.dao.RModelDAOImpl">
		<property name="sysParam" ref="systemParam"/>
	</bean>	
</beans>
