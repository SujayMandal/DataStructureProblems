/*
 * DeploymentQueryConstants.java
 *
 * -----------------------------------------------------------
 * Copyright 2014 Altisource - Consumer Analytics
 * All rights reserved.
 * Altisource PROPRIETARY/CONFIDENTIAL.
 * -----------------------------------------------------------
 */
package com.ca.umg.rt.core.deployment.constants;

/**
 * 
 **/
public final class DeploymentQueryConstants {

    public static final String GET_VERSION_MAPPING = "SELECT V.NAME AS VERSION_NAME, V.MAJOR_VERSION,V.MINOR_VERSION \n"
            + ",M.NAME AS MAPPING_NAME, M.MODEL_IO_DATA AS MODEL_IO_DATA \n"
            + ",MI.MAPPING_DATA AS INPUT_MAPPING_DATA, MI.TENANT_INTERFACE_DEFINITION AS INPUT_TID \n"
            + ",MO.MAPPING_DATA AS OUTPUT_MAPPING_DATA, MO.TENANT_INTERFACE_DEFINITION AS OUTPUT_TID, ML.ALLOW_NULL AS ALLOW_NULL FROM UMG_VERSION V \n"
            + "JOIN MAPPING M ON V.MAPPING_ID = M.ID \n" + "JOIN MAPPING_INPUT MI ON M.ID = MI.MAPPING_ID \n"
            + "LEFT JOIN MAPPING_OUTPUT MO ON M.ID = MO.MAPPING_ID JOIN MODEL ML ON ML.ID = M.MODEL_ID \n"
            + "WHERE V.TENANT_ID=:TENANT_ID \n"
            + "AND V.NAME=:NAME AND V.MAJOR_VERSION = :MAJOR_VERSION AND V.MINOR_VERSION = :MINOR_VERSION";
    public static final String GET_VERSION_QUERY = "SELECT V.NAME AS VERSION_NAME, V.MAJOR_VERSION,V.MINOR_VERSION \n"
            + ",M.NAME AS MAPPING_NAME \n"
            + ",Q.NAME AS QUERY_NAME,Q.EXEC_SEQUENCE,Q.EXEC_QUERY AS QUERY_STRING,Q.ROW_TYPE,Q.DATA_TYPE FROM UMG_VERSION V \n"
            + "JOIN MAPPING M ON V.MAPPING_ID = M.ID \n" + "JOIN SYNDICATE_DATA_QUERY Q ON M.ID = Q.MAPPING_ID \n"
            + "WHERE V.TENANT_ID=:TENANT_ID  \n"
            + "AND V.NAME=:NAME AND V.MAJOR_VERSION = :MAJOR_VERSION AND V.MINOR_VERSION = :MINOR_VERSION \n"
            + "ORDER BY Q.EXEC_SEQUENCE";
    public static final String GET_VERSION_LIBRARY = "SELECT V.NAME AS VERSION_NAME, V.MAJOR_VERSION,V.MINOR_VERSION \n"
            + ",ML.NAME AS MODEL_LIBRARY_NAME,ML.UMG_NAME MODEL_LIBRARY_UMG_NAME \n"
            + ",ML.DESCRIPTION AS MODEL_LIBRARY_DESCRIPTION \n"
            + ",ML.EXECUTION_LANGUAGE,ML.EXECUTION_TYPE,ML.JAR_NAME, ML.EXECUTION_ENVIRONMENT, ML.CHECKSUM_VALUE as CHECKSUM FROM UMG_VERSION V \n"
            + "JOIN MODEL_LIBRARY ML ON V.MODEL_LIBRARY_ID = ML.ID \n" + "WHERE V.TENANT_ID=:TENANT_ID \n"
            + "AND V.NAME=:NAME AND V.MAJOR_VERSION = :MAJOR_VERSION AND V.MINOR_VERSION = :MINOR_VERSION";
    public static final String GET_VERSION = "SELECT V.ID AS VERSION_ID,V.NAME AS VERSION_NAME, V.MAJOR_VERSION,V.MINOR_VERSION,V.STATUS, V.MODEL_TYPE FROM UMG_VERSION V \n"
            + "WHERE V.TENANT_ID=:TENANT_ID \n"
            + "AND LOWER(V.NAME)=:NAME AND V.MAJOR_VERSION = :MAJOR_VERSION AND V.MINOR_VERSION = :MINOR_VERSION";
    public static final String GET_MAX_MINOR_VERSION = "SELECT MAX(V.MINOR_VERSION) AS MINOR_VERSION FROM UMG_VERSION V "
            + "WHERE V.TENANT_ID=:TENANT_ID "
            + "AND LOWER(V.NAME)=:NAME AND V.MAJOR_VERSION = :MAJOR_VERSION AND V.STATUS = :STATUS";
    public static final String GET_SUPPORT_PACKAGES1 = "SELECT PACKAGE_FOLDER AS MODEL_LIBRARY_NAME, PACKAGE_NAME AS JAR_NAME FROM MODEL_SUPPORT_PACKAGE WHERE TENANT_ID=:TENANT_ID AND ID IN ("
            + "SELECT DISTINCT (PACKAGE_ID) FROM LIBRARY_PACKAGE_MAPPING WHERE LIBRARY_ID = "
            + "(SELECT MODEL_LIBRARY_ID FROM UMG_VERSION WHERE NAME=:VERSION_NAME AND MAJOR_VERSION=:MAJOR_VERSION AND MINOR_VERSION=:MINOR_VERSION AND TENANT_ID=:TENANT_ID));";

    public static final String GET_SUPPORT_PACKAGES = "SELECT mep.PACKAGE_FOLDER, mep.PACKAGE_NAME, mep.PACKAGE_TYPE, mep.PACKAGE_VERSION, mep.COMPILED_OS, "
            + "mee.EXECUTION_ENVIRONMENT, mee.ENVIRONMENT_VERSION, maping.EXEC_SEQUENCE "
            + "FROM MODEL_LIBRARY ml join UMG_VERSION uv ON ml.ID = uv.MODEL_LIBRARY_ID "
            + "join MODEL_LIB_EXEC_PKG_MAPPING maping ON maping.MODEL_LIBRARY_ID = ml.ID "
            + "join umg_admin.MODEL_EXEC_PACKAGES mep ON mep.ID = maping.MODEL_EXEC_PKG_ID "
            + "join umg_admin.MODEL_EXECUTION_ENVIRONMENTS mee ON mep.MODEL_EXEC_ENV_NAME = mee.NAME "
            + "WHERE uv.NAME=:VERSION_NAME AND uv.MAJOR_VERSION=:MAJOR_VERSION AND uv.MINOR_VERSION=:MINOR_VERSION AND uv.TENANT_ID=:TENANT_ID";

    public static final String GET_MODEL_PACKAGE_NAME = "SELECT PACKAGE_NAME FROM MODEL_LIBRARY ml join UMG_VERSION uv ON ml.ID = uv.MODEL_LIBRARY_ID "
            + "WHERE uv.NAME=:VERSION_NAME AND uv.MAJOR_VERSION=:MAJOR_VERSION AND uv.MINOR_VERSION=:MINOR_VERSION AND uv.TENANT_ID=:TENANT_ID";

    public static final String GET_EXEC_LANGUAGE_VERSION = "SELECT me.ENVIRONMENT_VERSION AS ENVIRONMENT_VERSION, me.EXECUTION_ENVIRONMENT AS EXECUTION_LANGUAGE , ml.EXECUTION_ENVIRONMENT as EXECUTION_ENVIRONMENT FROM MODEL_LIBRARY ml "
            + "join UMG_VERSION uv ON ml.ID = uv.MODEL_LIBRARY_ID "
            + "join umg_admin.MODEL_EXECUTION_ENVIRONMENTS me ON ml.MODEL_EXEC_ENV_NAME = me.NAME "
            + "WHERE lower(uv.NAME)=:VERSION_NAME AND uv.MAJOR_VERSION=:MAJOR_VERSION AND uv.MINOR_VERSION=:MINOR_VERSION AND uv.TENANT_ID=:TENANT_ID";

    public static final String GET_EXECUTION_ENVIRONMENT = "SELECT ML.EXECUTION_ENVIRONMENT AS EXC_ENV , ML.CHECKSUM_VALUE as CHECKSUM FROM MODEL_LIBRARY ML, UMG_VERSION V "
            + "WHERE ML.ID = V.MODEL_LIBRARY_ID AND ML.TENANT_ID = V.TENANT_ID AND lower(V.NAME) = :VERSION_NAME AND V.MAJOR_VERSION = :MAJOR_VERSION "
            + "AND V.MINOR_VERSION = :MINOR_VERSION AND V.TENANT_ID = :TENANT_ID";

    private DeploymentQueryConstants() {
    };
}
